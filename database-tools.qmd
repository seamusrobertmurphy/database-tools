---
title: "SQLite Database Tools in R"
format: 
  gfm:
    toc: true
    toc-location: right
    toc-title: "**Contents**"
    toc-depth: 5
    toc-expand: 4
    theme: [minimal, ./R/styles.scss]
df-print: kable
keep-md: true
prefer-html: true
---

## Install packages

```{r setup}
#| warning: false
#| message: false
#| error: false
#| echo: true
#devtools::install_github("skranz/restorepoint") # dbmisc dependency
#install.packages("dbmisc", repos = c("https://skranz-repo.github.io/drat/")) # dbmisc package

#install.packages("easypackages")
easypackages::packages(
  "animation",
  "BIOMASS",
  "dataMaid",
  "DBI",
  "dplyr",
  "extrafont",
  "glue",
  "here",
  "htmltools",
  "janitor",
  "kableExtra",
  "knitr",
  "readxl",
  "RSQLite",
  "tinytex")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE,
  error = TRUE, comment = NA, tidy.opts = list(width.cutoff = 60)) 
options(htmltools.dir.version = FALSE, htmltools.preserve.raw = FALSE)
sf::sf_use_s2(use_s2 = FALSE)
```

## Import excel data

```{r}
set.seed(333)
excel_data <- read.csv("./R/dataset_tidy.csv")
excel_data
```

## Build sql database

To create an empty SQL database from scratch, simply supply the filename to `dbConnect()`:

```{r}
# establish connection / create empty database
db_connection <- DBI::dbConnect(RSQLite::SQLite(), "/Users/seamus/Repos/database-tools/R/database.db")
#db_connection = dbConnect(RSQLite::SQLite(), "")         #temporary on-disk database
#db_connection = dbConnect(RSQLite::SQLite(), ":memory:") #temporary in-memory database

# enable additional extensions in RSQLite
RSQLite::initExtension(db_connection, extension = c("math", "regexp", "series", "csv", "uuid"))

# disconnect
#DBI::dbDisconnect(db_connection)
```

To add content from a dataframe or excel file to the new SQL database, use `dbWriteTable()` functions: 

```{r}
# connect
db_connection <- DBI::dbConnect(RSQLite::SQLite(), "/Users/seamus/Repos/database-tools/R/database.db")

# write new table
DBI::dbWriteTable(
  conn      = db_connection, 
  name      = "tree_init", 
  value     = excel_data, 
  overwite  = T, 
  append    = T
  )

# review content
DBI::dbListTables(db_connection)
DBI::dbListFields(db_connection, name = "tree_init")
```

## Query sql database

```{r}
# write sql query
query =  "SELECT species_j, volume
          FROM tree_init
          WHERE species_j == 'Sp1'"
        
species_volume_1 = DBI::dbGetQuery(db_connection, statement = query)

# dplyr sql query
species_volume_2 = db_connection |>
  dplyr::tbl("tree_init") |>
  dplyr::select(species_j, volume) |>
  dplyr::filter(species_j == 'Sp1') |>
  dplyr::collect()

# check if same
species_volume_1
species_volume_2
```

## Disconnect dql database


```{r}
DBI::dbDisconnect(db_connection)
```

 
## Convert to R.script

```{r}
#| eval: false
knitr::purl("database-tools.qmd")
```
